{% extends 'layouts/app.html.twig' %}

{% block title %}Players{% endblock %}

{% block breadcrumbs %}
    <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="#">Home</a></li>
            <li class="breadcrumb-item active" aria-current="page">Players</li>
        </ol>
    </nav>
{% endblock %}

{% block body %}
    <div class="row px-3">
        <div class="col-12">
            <div class=" align-content-right" >
                <div class="card-body">
                    <a href="{{ path('players.create') }}" class="btn btn-primary float-right">Create Player</a>
                </div>
            </div>
        </div>
        <div class="col-12 my-5">
            <div class="">
                <table class="table table-hover">
                    <thead class="table-primary">
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Name</th>
                        <th scope="col">Surname</th>
                        <th scope="col">Market Value</th>
                        <th scope="col">Team Name</th>
                        <th scope="col">Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    {% for player in players %}
                        <tr>
                            <th scope="row">{{ player.id }}</th>
                            <td>{{ player.name }}</td>
                            <td>{{ player.surname }}</td>
                            <td>{{ player.marketValue }}</td>
                            <td>{{ player.team.name }}</td>
                            <td>
                                <div>
{#                                    <a href="{{ path('players.show', {id: player.id}) }}" class="btn btn-outline-primary">Show</a>#}
                                    <a href="{{ path('players.edit', {id: player.id}) }}" class="btn btn-outline-primary">Edit</a>
                                    <a type="button" data-item-name="{{ player.name }}" data-item-id="{{ player.id }}"  class="btn btn-outline-danger delete-btn">Delete</a>
                                </div>
                            </td>
                        </tr>
                    {% else %}
                        <tr>
                            <td colspan="5">no records found</td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
        <div class="col-12">
            {{ knp_pagination_render(players) }}
        </div>
    </div>
{% endblock %}

{% block scripts %}
    <script>

        $(".delete-btn").click(async function (item) {
            const element = $(item.target);

            let url = '{{ url('players.delete', {id: ':id'}) }}';
            url = url.replace(':id', element.data('item-id'))
            const token = '{{ csrf_token('delete') }}'

            const userFeedBack = await Swal.fire({
                title: `Are sure to delete player ${element.data('item-name')}`,
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            })

            if (! userFeedBack.isConfirmed) {
                await Swal.fire({
                    title: 'Action Aborted',
                    html: 'closing in <b></b> milliseconds.',
                    timer: 2000,
                    timerProgressBar: true,
                    didOpen: () => {
                        Swal.showLoading()
                        const b = Swal.getHtmlContainer().querySelector('b')
                        timerInterval = setInterval(() => {
                            b.textContent = Swal.getTimerLeft()
                        }, 100)
                    },
                    willClose: () => {
                        clearInterval(timerInterval)
                    }
                });

                return;
            }

            const request = await fetch(url + '?_token=' + token , {
                method: 'DELETE',
                headers: {
                    'X-CSRF-TOKEN': token,
                }
            })

            document.location.reload();
        })
    </script>

{% endblock %}
